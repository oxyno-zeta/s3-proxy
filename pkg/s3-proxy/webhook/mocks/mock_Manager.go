// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/webhook (interfaces: Manager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	webhook "github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/webhook"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockManager) Load() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockManagerMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockManager)(nil).Load))
}

// ManageDELETEHooks mocks base method.
func (m *MockManager) ManageDELETEHooks(arg0 context.Context, arg1, arg2 string, arg3 *webhook.S3Metadata) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ManageDELETEHooks", arg0, arg1, arg2, arg3)
}

// ManageDELETEHooks indicates an expected call of ManageDELETEHooks.
func (mr *MockManagerMockRecorder) ManageDELETEHooks(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManageDELETEHooks", reflect.TypeOf((*MockManager)(nil).ManageDELETEHooks), arg0, arg1, arg2, arg3)
}

// ManageGETHooks mocks base method.
func (m *MockManager) ManageGETHooks(arg0 context.Context, arg1, arg2 string, arg3 *webhook.GetInputMetadata, arg4 *webhook.S3Metadata) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ManageGETHooks", arg0, arg1, arg2, arg3, arg4)
}

// ManageGETHooks indicates an expected call of ManageGETHooks.
func (mr *MockManagerMockRecorder) ManageGETHooks(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManageGETHooks", reflect.TypeOf((*MockManager)(nil).ManageGETHooks), arg0, arg1, arg2, arg3, arg4)
}

// ManagePUTHooks mocks base method.
func (m *MockManager) ManagePUTHooks(arg0 context.Context, arg1, arg2 string, arg3 *webhook.PutInputMetadata, arg4 *webhook.S3Metadata) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ManagePUTHooks", arg0, arg1, arg2, arg3, arg4)
}

// ManagePUTHooks indicates an expected call of ManagePUTHooks.
func (mr *MockManagerMockRecorder) ManagePUTHooks(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManagePUTHooks", reflect.TypeOf((*MockManager)(nil).ManagePUTHooks), arg0, arg1, arg2, arg3, arg4)
}
