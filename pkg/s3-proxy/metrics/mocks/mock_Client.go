// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/metrics (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetExposeHandler mocks base method.
func (m *MockClient) GetExposeHandler() http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExposeHandler")
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// GetExposeHandler indicates an expected call of GetExposeHandler.
func (mr *MockClientMockRecorder) GetExposeHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExposeHandler", reflect.TypeOf((*MockClient)(nil).GetExposeHandler))
}

// IncAuthenticated mocks base method.
func (m *MockClient) IncAuthenticated(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncAuthenticated", arg0, arg1)
}

// IncAuthenticated indicates an expected call of IncAuthenticated.
func (mr *MockClientMockRecorder) IncAuthenticated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncAuthenticated", reflect.TypeOf((*MockClient)(nil).IncAuthenticated), arg0, arg1)
}

// IncAuthorized mocks base method.
func (m *MockClient) IncAuthorized(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncAuthorized", arg0)
}

// IncAuthorized indicates an expected call of IncAuthorized.
func (mr *MockClientMockRecorder) IncAuthorized(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncAuthorized", reflect.TypeOf((*MockClient)(nil).IncAuthorized), arg0)
}

// IncFailedWebhooks mocks base method.
func (m *MockClient) IncFailedWebhooks(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncFailedWebhooks", arg0, arg1)
}

// IncFailedWebhooks indicates an expected call of IncFailedWebhooks.
func (mr *MockClientMockRecorder) IncFailedWebhooks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncFailedWebhooks", reflect.TypeOf((*MockClient)(nil).IncFailedWebhooks), arg0, arg1)
}

// IncS3Operations mocks base method.
func (m *MockClient) IncS3Operations(arg0, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncS3Operations", arg0, arg1, arg2)
}

// IncS3Operations indicates an expected call of IncS3Operations.
func (mr *MockClientMockRecorder) IncS3Operations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncS3Operations", reflect.TypeOf((*MockClient)(nil).IncS3Operations), arg0, arg1, arg2)
}

// IncSucceedWebhooks mocks base method.
func (m *MockClient) IncSucceedWebhooks(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncSucceedWebhooks", arg0, arg1)
}

// IncSucceedWebhooks indicates an expected call of IncSucceedWebhooks.
func (mr *MockClientMockRecorder) IncSucceedWebhooks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncSucceedWebhooks", reflect.TypeOf((*MockClient)(nil).IncSucceedWebhooks), arg0, arg1)
}

// Instrument mocks base method.
func (m *MockClient) Instrument(arg0 string) func(http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instrument", arg0)
	ret0, _ := ret[0].(func(http.Handler) http.Handler)
	return ret0
}

// Instrument indicates an expected call of Instrument.
func (mr *MockClientMockRecorder) Instrument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instrument", reflect.TypeOf((*MockClient)(nil).Instrument), arg0)
}
