version: 2
jobs:
  # Test validation for semantic-release
  semantic-release:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run: sudo npm install -g semantic-release@17.0.4 @semantic-release/exec@5.0.0
      - run: semantic-release --ci --dry-run
  lint:
    docker:
      - image: circleci/golang:1.14
    working_directory: /go/src/github.com/oxyno-zeta/s3-proxy
    steps:
      - checkout
      - run: make code/lint
      - save_cache:
          key: go-mod-{{ checksum "go.mod"  }}
          paths:
            - "/go/pkg/"
  build:
    docker:
      - image: circleci/golang:1.14
    working_directory: /go/src/github.com/oxyno-zeta/s3-proxy
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-{{ checksum "go.mod"  }}
      - run: make code/build
  build-cross:
    docker:
      - image: circleci/golang:1.14
    working_directory: /go/src/github.com/oxyno-zeta/s3-proxy
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - go-mod-{{ checksum "go.mod"  }}
      - run: make code/build-cross
  test:
    machine:
      image: ubuntu-1604:202004-01
    working_directory: /home/circleci/go/src/github.com/oxyno-zeta/s3-proxy
    environment:
      GO_VERSION: "1.14.2"
      DOCKERIZE_VERSION: v0.6.0
      OS: linux
      ARCH: amd64
      GOPATH: /home/circleci/go
      GOBIN: /home/circleci/go/bin
      GOROOT: /home/circleci/golang/go
    steps:
      - checkout
      - restore_cache:
          key: go-machine-dl-1.14.2
      - run: |-
          mkdir -p /home/circleci/golang /home/circleci/dl
          if [ ! -f /home/circleci/dl/go-$GO_VERSION.tar.gz ]; then
            wget https://dl.google.com/go/go$GO_VERSION.$OS-$ARCH.tar.gz -O /home/circleci/dl/go-$GO_VERSION.tar.gz
          fi
          tar -C /home/circleci/golang -xzf /home/circleci/dl/go-$GO_VERSION.tar.gz
      - save_cache:
          key: go-machine-dl-1.14.2
          paths:
            - /home/circleci/dl/go-1.14.2.tar.gz
      - restore_cache:
          keys:
            - go-mod-machine-{{ checksum "go.mod"  }}
      - run:
          name: install dockerize if not found in cache
          command: if \[ -f /usr/local/bin/dockerize \]; then
            echo "dockerize found; skipping installation";
            else wget   https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz;
            fi
      - run: make setup/services
      - run: dockerize -wait tcp://localhost:8088 -timeout 5m
      - run: dockerize -wait tcp://localhost:8181 -timeout 5m
      - run: docker logs keycloak
      - run: make test/all
      - run: make test/coverage
      - run: mv coverage.html /tmp/artifacts
      - store_artifacts:
          path: /tmp/artifacts
      - run: go get -u github.com/mattn/goveralls
      - run: |-
          export PATH=$GOBIN:$PATH
          goveralls -coverprofile=c.out -service=circle-ci -repotoken=$COVERALLS_TOKEN
      - save_cache:
          key: go-mod-machine-{{ checksum "go.mod"  }}
          paths:
            - "/home/circleci/go/pkg"
workflows:
  version: 2
  project:
    jobs:
      - semantic-release
      - lint
      - build:
          requires:
            - lint
      - build-cross:
          requires:
            - lint
      - test:
          requires:
            - lint
